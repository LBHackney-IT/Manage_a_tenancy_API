<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManageATenancyAPI</name>
    </assembly>
    <members>
        <member name="M:ManageATenancyAPI.Controllers.AccountsController.GetTagReferencenumber(System.String)">
            <summary>
            GetTagReferencenumber.
            </summary>
            <param name="hackneyhomesId">Payment reference number for Account</param>
            <returns>Returns tag reference number</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.AccountsController.GetAccountDetailsByPaymentorTagReference(System.String)">
            <summary>
            GetAsync account details by tag reference or paris ref
            </summary>
            <param name="referencenumber">Payment reference or tag reference number for Account</param>
            <returns>Returns account details in Json Object</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.AccountsController.GetAccountDetailsByContactId(System.String)">
            <summary>
            Verify Housing Account Details by Payment Reference and postcode.
            </summary>
            <param name="referencenumber">Payment reference number for Account</param>
            <returns>Returns account details in Json Object</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ContactsController.Post(ManageATenancyAPI.Models.Housing.NHO.Contact)">
            <summary>
            Creates a new CRM contact
            </summary>
            <returns>Returns the guid of the created contact</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ContactsController.UpdateNextOfKin(ManageATenancyAPI.Models.Housing.NHO.NextOfKin)">
            <summary>
            Updates next of kin details saved against a contact
            </summary>
            <returns>Returns the updated information</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.EstateController.GetEstatesByTra(System.Int32)">
            <summary>
            Location of Issue - list
            </summary>
            <param name="traId"></param>
            <returns></returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.Post(ManageATenancyAPI.Models.Housing.NHO.ETRAIssue)">
            <summary>
            Creates an ETRA meeting
            </summary>
            <returns>A JSON object for a successfully created ETRA meeting request</returns>
            <response code="201">A successfully created ETRA meeting request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.RecordAttendance(System.String,ManageATenancyAPI.Models.Housing.NHO.RecordETRAMeetingAttendanceRequest)">
            <summary>
            Records the people who attended an ETRA meeting.
            </summary>
            <param name="id">Meeting id.</param>
            <param name="request">Object containing the councillors, other staff and total attendance of the meeting.</param>
            <returns>Whether the meeting attendance has been successfully recorded</returns>
            <response code="200">Successfully recorded meeting attendance</response>
            <response code="404">No meeting with the specified id found</response>
            <response code="400">Null or empty id or null request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.AddIssueResponse(System.String,ManageATenancyAPI.Models.Housing.NHO.ETRAIssueResponseRequest)">
            <summary>
            Records a response from a service area to an ETRA issue.
            </summary>
            <param name="id">Issue id.</param>
            <param name="request">Object containing the required data to record the response.</param>
            <returns>Whether the issue response has been successfully recorded</returns>
            <response code="200">Successfully recorded issue response</response>
            <response code="400">Null or empty id or null request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.RejectResponse(System.String,ManageATenancyAPI.Models.Housing.NHO.ETRAIssueRejectResponseRequest)">
            <summary>
            Rejects the response to an issue from a service area.
            </summary>
            <param name="issueId">Issue id.</param>
            <param name="request">Object containing the required data to reject the response.</param>
            <returns>Whether the issue response has been successfully rejected</returns>
            <response code="200">Successfully recorded issue response</response>
            <response code="400">Null or empty id or null request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.CloseIncident(System.Guid,System.String)">
            <summary>
            Closes an incident in the CRM.
            </summary>
            <param name="id">The incident id.</param>
            <param name="note">An optional note to store when closing the incident.</param>
            <returns>Whether the incident has been successfully closed</returns>
            <response code="200">Successfully closed the incident</response>
            <response code="400">Empty id</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.FinaliseMeeting(System.String,ManageATenancyAPI.Models.Housing.NHO.FinaliseETRAMeetingRequest)">
            <summary>
            Finalises ETRA Meetings by meeting id, and optionally a signatory with their role.
            </summary>
            <param name="id">Meeting id.</param>
            <param name="request">(Optional) Object containing the guid reference of the signature and the string with the signatory's role.</param>
            <returns>Whether the meeting has been successfully finalised</returns>
            <response code="200">Successfully finalised meeting</response>
            <response code="404">No meeting with the specified id found</response>
            <response code="403">Meeting has already been finalised</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.GetMeetingDetails(System.Guid)">
            <summary>
            Gets the details of an ETRA meeting.
            </summary>
            <param name="id">Meeting id.</param>
            <returns>The details of the meeting</returns>
            <response code="200">Successfully recorded issue response</response>
            <response code="400">Empty id</response>
            <response code="404">No such meeting exists</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.GetETRAISsues(System.String,System.Boolean)">
            <summary>
            Gets ETRA Issues by TRA ID or parent interaction. Used to retrieve issue for a TRA or for a specific ETRA meeting.
            </summary>
            <param name="id">TRA Id for issues per TRA or Parent Interaction ID for issues per meeting</param>
            <param name="retrieveETRAMeetingIssues">True if meeting specific issues are to be retrieved. False if all issues per TRA are to be retrieved.</param>
            <returns>A list of ETRA issue for a TRA or a specific ETRA meeting</returns>
            <response code="200">Successfully retrieved ETRA issues request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.ETRAController.GetETRAMeetingsByTRA(System.String)">
            <summary>
            Gets all meetings for a specified TRA.
            </summary>
            <param name="id">TRA id.</param>
            <returns>A list of ETRA meetings</returns>
            <response code="200">Successfully returned meetings</response>
            <response code="400">Null or empty id</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.TenancyController.GetNewTenancies">
            <summary>
            Gets new tenancies recorded in the CRM since the last run, or in the last day where it hasn't been run before.
            </summary>
            <returns>A list of new tenancies. This could be an empty list.</returns>
            <response code="200">Successfully returned any new tenancies</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.TenancyManagementInteractionsController.Post(ManageATenancyAPI.Models.Housing.NHO.TenancyManagement)">
            <summary>
            Creates a TenancyManagement request
            </summary>
            <param name="ContactId">ContactId</param>
            <param name="EnquirySubject">EnquirySubject</param>
            <param name="EstateOfficerId">EstateOfficerId</param>
            <param name="Subject">Subject</param>
            <param name="AdviceGiven">AdviceGiven</param>
            <param name="EstateOffice">EstateOffice</param>
            <param name="Source">Source</param>
            <param name="NatureofEnquiry">NatureofEnquiry</param>
            <param name="CRMServiceRequest">ServiceRequest</param>
            <returns>A JSON object for a successfully created TenancyManagement request</returns>
            <response code="200">A successfully created repair request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.TenancyManagementInteractionsController.ServiceRequest(ManageATenancyAPI.Models.CRMServiceRequest)">
            <summary>
            Creates a Service request
            </summary>
            <param name="ContactId">ContactId</param>
            <param name="title">title</param>
            <param name="description">description</param>
            <param name="Subject">Subject</param>
            <param name="NatureofEnquiry">NatureofEnquiry</param>
            <returns>A JSON object for a successfully created TenancyManagement request</returns>
            <response code="200">A successfully created repair request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.TenancyManagementInteractionsController.GetAreaTrayIneractions(System.String)">
            <summary>
            GetAsync group Tray 
            </summary>
            <param name="OfficeId">OfficeId of the Group Tray</param>
            <returns>A JSON object for a successfully returns for Group Tray TenancyManagement request</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.Housing.NHO.TenancyManagementInteractionsController.Put(ManageATenancyAPI.Models.Housing.NHO.TenancyManagement)">
            <summary>
            TransferCallToAreaAndPatch
            </summary>
            <param name="tenancyInteraction"> List Of interaction or call to be updated/tranferred </param>
            <returns>List Of interaction or call which has been successfully updated/tranferred</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.OfficerAccountsController.CreateOfficerAccount(ManageATenancyAPI.Models.Housing.NHO.EstateOfficerAccount)">
            <summary>
            Creates a new Estate Officer Account
            </summary>
            <returns>Officers Id, FirstName, LastName, UserName</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.OfficerAccountsController.DisableOfficerAccount(System.String,System.String)">
            <summary>
            Disable Estate Officer Account
            </summary>
            <returns>Officers Id, FirstName, LastName, UserName</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.v2.TRAController.Post(ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SaveETRAMeetingInputModel)">
            <summary>
            Creates an ETRA meeting
            If the signoff object is provided then it will complete the meeting in one go
            If the signoff object is null then it will send out an email to the TRA representative stored in the database
            with a link to signoff the meeting with their name.
            In the second flow please post the signoff object via the Patch HttpMethod to complete the meeting
            </summary>
            <returns>A JSON object for a successfully created ETRA meeting request</returns>
            <response code="200">A successfully created ETRA meeting request</response>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.v2.TRAController.Get">
            <summary>
            Gets an ETRA meeting
            </summary>
            <returns>A JSON object for a successfully created ETRA meeting request</returns>
        </member>
        <member name="M:ManageATenancyAPI.Controllers.v2.TRAController.Patch(ManageATenancyAPI.UseCases.Meeting.SignOffMeeting.Boundary.SignOffMeetingInputModel)">
            <summary>
            Gets an ETRA meeting
            </summary>
            <returns>A JSON object for a successfully created ETRA meeting request</returns>
        </member>
        <member name="T:ManageATenancyAPI.Helpers.EmailUtils">
            <summary>
            Summary description for EmailUtils
            </summary>
        </member>
        <member name="F:ManageATenancyAPI.Helpers.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:ManageATenancyAPI.Helpers.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.Id">
            <summary>
            IGNORE - AUTO GENERATED BY CRM
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.Title">
            <summary>
            IGNORE - NOT REQUIRED 
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.Description">
            <summary>
            Issue.Notes for ETRA Issues
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.ContactId">
            <summary>
            IGNORE - Customer from the Contacts Entity - Can be ignored for ETRA as has it's own Account 
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.ParentCaseId">
            <summary>
            IGNORE - NOT USED FOR ETRA
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.Subject">
            <summary>
            CRM Subjects Entity Table, List of Values in Ticket
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.CreatedDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.TicketNumber">
            <summary>
            Autogenerated by CRM
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.RequestCallback">
            <summary>
            Old requirement - not used anymore
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.Transferred">
            <summary>
            For transferring tickets to other Housing Officers
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.CRMServiceRequest.CreatedBy">
            <summary>
            Officer Id
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.subject">
            <summary>
            CRM ENtity Subjects.subjectid 72873b3e-5255-e911-a97a-002248072cc3
            Generic subject id is used to Creating Meeting = c1f72d01-28dc-e711-8115-70106faa6a11" (dev)
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.officerPatchId">
            <summary>
            Patch - ID - Can be swapped , still links to AREA ID
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.areaName">
            <summary>
            AreaId - AREA ID Taken from Login information
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.processType">
            <summary>
            ALWAYS 3
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.issueLocation">
            <summary>
            Name of TRA block within an estate or the estate itself
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.parentInteractionId">
            <summary>
            Tenancy Management Interaction Id for Meeting
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.natureOfEnquiry">
            <summary>
            ALWAYS 28 - ETRA
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.Models.Housing.NHO.ETRAIssue.enquirySubject">
            Issue Type Id - 10000111 - NOT NAME
        </member>
        <member name="T:ManageATenancyAPI.Services.JWT.IJWTService">
            <summary>
            Service to Decrypt JWT tokens sent from Outsystems
            </summary>
        </member>
        <member name="M:ManageATenancyAPI.Services.JWT.IJWTService.GetManageATenancyClaims(System.String,System.String)">
            <summary>
            Validates claims against signing key with secret and returns data in a nicely formatted manner.
            </summary>
            <param name="token"></param>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:ManageATenancyAPI.Services.JWT.JWTService.GetManageATenancyClaims(System.String,System.String)">
            <summary>
            Validates claims against signing key with secret and returns data in a nicely formatted manner.
            </summary>
            <param name="token"></param>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:ManageATenancyAPI.Services.JWT.JWTService.GetMeetingIdClaims(System.String,System.String)">
            <summary>
            Validates claims against signing key with secret and returns data in a nicely formatted manner.
            </summary>
            <param name="token"></param>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.Boundary.IMeetingOutputModel">
            <summary>
            Interface Output model for a meeting
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.Boundary.IMeetingOutputModel.Id">
            <summary>
            Refers to the TenancyInteractionId in Dynamics 365
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.GetMeeting.GetEtraMeetingInputModel">
            <summary>
            InputModel for getting a meeting
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.GetMeeting.GetEtraMeetingOutputModel">
            <summary>
            Output model for getting a meeting
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.GetMeeting.GetEtraMeetingOutputModel.Id">
            <summary>
            Refers to the TenancyInteractionId in Dynamics 365
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.IETRAMeeting.processType">
            <summary>
            0 - ManageTenancy Interaction - requests that aren't process
            1 - ETRA Meeting
            2 - Post Visit action
            3 - ETRA Issue
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingAttendees">
            <summary>
            Interface describing attendees of a meeting
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingAttendees.Councillors">
            <summary>
            Optional ideally comma separated list of Councillors as a record of who attended
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingAttendees.HackneyStaff">
            <summary>
            Optional ideally comma seperated list of Hackney staff as a record of who attended 
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingAttendees.Attendees">
            <summary>
            Number of attendees to the meeting that aren't Councillors or Hackney staff, must be greater than 1
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingIssue">
            <summary>
            Interface representing a meeting issue
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingIssue.IssueType">
             <summary>
            
             </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.MeetingIssueOutputModel">
            <summary>
            Class representing a meeting issue after it's been saved
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SaveETRAMeetingInputModel">
            <summary>
            Input Model for Save etra meeting use case
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SaveEtraMeetingOutputModel">
            <summary>
            Output model for saving a meeting
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SaveEtraMeetingOutputModel.Id">
            <summary>
            Refers to the TenancyInteractionId in Dynamics 365
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SignOff.Signature">
            <summary>
            Base 64 encoded signature image
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SignOff.Name">
            <summary>
            Name of TRA rep
            </summary>
        </member>
        <member name="P:ManageATenancyAPI.UseCases.Meeting.SaveMeeting.Boundary.SignOff.Role">
            <summary>
            TRA role
            </summary>
        </member>
        <member name="T:ManageATenancyAPI.UseCases.Meeting.SignOffMeeting.Boundary.SignOffMeetingOutputModel">
            <summary>
            Input Model for signing off a meeting
            </summary>
        </member>
        <member name="T:LBH.Utils.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient.
            </summary>
        </member>
        <member name="M:LBH.Utils.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of SqlParameters tho be added to command</param>
        </member>
        <member name="M:LBH.Utils.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:LBH.Utils.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the SqlCommand to be prepared</param>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:LBH.Utils.SqlHelper.SqlConnectionOwnership">
            <summary>
            this enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:LBH.Utils.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:LBH.Utils.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],LBH.Utils.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteAsync a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            ExecuteAsync a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:LBH.Utils.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:LBH.Utils.SqlHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:LBH.Utils.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:LBH.Utils.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an array of SqlParamters</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="M:LBH.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of SqlParameters</returns>
        </member>
        <member name="T:LBH.Utils.Utils">
            <summary>
            Summary description for Helpers
            </summary>
        </member>
    </members>
</doc>
